(cl:in-package #:generative-models)

(5am:def-fixture simple-delta-model ()
  (let* ((f-domain (loop for i below 3 collect i))
	 (df (f:make 'df '(f) ()
		     (lambda (f) 
		       (lambda () 
			 (loop for next in f-domain collect
			      (- next f))))))
	 (f (f::make-recursive 'f '() '(df)
			       (lambda (f)
				 (lambda (df)
				   (list (+ f df))))
			       nil nil
			       (f:generative f-domain)))
	 (graph (gm:make f df)))
    (&body)))

(5am:def-fixture simple-delta-model ()
  (let* ((octave-size 12)
	 (octaves 8)
	 (pitch-domain (loop for i below (* octaves octave-size) collect i))
	 (dpitch (f:phi 'dpitch '(pitch) ()
		      (lambda (previous) 
			(lambda () 
			  (loop for pitch in pitch-domain collect
			       (- pitch previous))))))
	 (pitch (f:phi 'pitch '(pitch '(dpitch octave)
		     (lambda (pitch)
		       (lambda (dpitch octave)
			 (let ((new (+ pitch dpitch)))
			   (when (eq (utils:quotient new octave) octave)
			     (list new)))))
		     :initialisation (lambda () pitch-domain)
		     :observation #'identity))
	 ;; Model with 0th-order dist
	 (octave (generative (loop for octave below octaves collect octave)))
	 (model (make-model pitch dpitch octave)))
    (set-ppm-features model dpitch)
    (&body))))

(5am:def-fixture simple-branch-model ()
  (let* ((a (f:phi 'a '() ()
		      (lambda () 
			(lambda ()
			  '(x y)))))
	 (b (f:phi 'b '() '(a)
		     (lambda ()
		       (lambda (a)
			 (case a
			   (x '(a b))
			   (y '(a)))))))
	 (c (f:phi 'c '() '(a)
		     (lambda ()
		       (lambda (a)
			 (case a
			   (x '(a))
			   (y '(a b)))))))
	 (model (make-model a b c)))
    (set-ppm-features model)
    (&body)))

(5am:def-fixture simple-confluence-model ()
  (let* ((a (f:phi 'a '() ()
		     (lambda () 
		       (lambda ()
			 '(0 1 2)))))
	 (b (f:phi 'b '() '()
		 (lambda ()
		   (lambda ()
		     '(10 100 1000)))))
	 (c (f:phi 'c '() '(a b)
		 (lambda ()
		   (lambda (a b)
		     (list (+ a b))))))
	 (model (make-model a b c)))
    (set-ppm-features model)
    (&body)))

(5am:def-fixture simple-branch-model-2 ()
  (let* ((a (f:phi 'a '() ()
		 (lambda () 
		   (lambda ()
		     '(0 1 2)))))
	 (b (f:phi 'b '() '(a)
		 (lambda ()
		   (lambda (a)
		     (list a)))))
	 (c (f:phi 'c '() '(a)
		 (lambda ()
		   (lambda (a)
		     (list a)))))
	 (model (make-model a b c)))
    (set-ppm-features model)
    (&body)))

(5am:def-fixture key-model ()
  (let* ((octave 12)
	 (scale-degrees (loop for sd below octave collect sd))
	 (octave-range 8)
	 (pitches (loop for p below (* octave-range octave) collect p))
	 (tonic (f:phi 'tonic '() '(tonic)
		     (lambda (tonic) 
		       (lambda () 
			 (list tonic)))
		     :initialisation (lambda () scale-degrees)))
	 (scale-degree (f:phi 'scale-degree '() '()
			    (lambda () 
			      (lambda () 
				scale-degrees))))
	 (pitch (f:phi 'pitch '() '(tonic scale-degree)
		     (lambda ()
		       (lambda (tonic scale-degree)
			 (loop for pitch in pitches
			    if (eq scale-degree
				   (+ (mod pitch octave)
				      tonic))
			    collect pitch)))
		     :observation #'first))
	 (model (make-model tonic scale-degree pitch)))
    (set-ppm-features model)
    (&body)))

;; TODO: Key model with just relative pitch?

(5am:def-fixture metre-model ()
  (let* ((period (f:phi 'period () ()
		      (lambda ()
			(lambda ()
			  '(2 3 4 6 8)))))
	 (bar '(f:phi 'bar () ()
		(lambda ()
		  (lambda ()
		    (duple triple quadruple)))))
	 (subdivision '(simple compound))
	 (metrical-accent (phi 'metrical-accent '() '(subdivision period bar))))))

(5am:def-fixture metre-model ()
  (let* ((period (f:phi 'period '(period) ()
		      (lambda (period)
			(lambda ()
			  (list period)))
		      :initialisation (lambda () '(2 3 4 6 8))))
	 (metre (f:phi 'metre '(metre) ()
		     (lambda (metre)
		       (lambda ()
			 (list metre)))
		     :initialisation (lambda () '(a b c))))
	 (phase-0 (f:phi 'phase-0 '(phase) '(period)
		     (lambda (phase)
		       (lambda ()
			 (list phase)))
		     :initialization (lambda ()
				       (loop for phase below lcm collect phase))))
	 (phase (f:phi 'phase '() '(metre)
		     (lambda ()
		       (lambda (metre)
			 (loop for phase below lcm collect phase)))
)))))

(5am:def-fixture metre-model ()
  (let* ((metre '(f:phi '() '()
		  (lambda ()
		    (lambda ()
		      '((2) (3) (2 2) (3 3) (2 3) (3 2))))))
	 (metrical-position (f:phi '() '(metre)
				 (lambda ()
				   (lambda (metre)
				     (loop for p below (reduce #'* metre)
					  collect p)))))
	 (metrical-accent (f:phi '() '(metre)
			       (lambda ()
				 (lambda (metre)
				   (loop for p below (length metre)
				      collect p)))))
	 (model (make-model metre metrical-position)))
    (&body)))










